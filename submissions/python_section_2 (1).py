# -*- coding: utf-8 -*-
"""python_section_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XlkzozFSeEjE0YZ4kS_x_llyqXj99Fup
"""

import pandas as pd
import numpy as np

"""Question 9: Distance Matrix Calculation
Create a function named calculate_distance_matrix that takes the dataset-2.csv as input and generates a DataFrame representing distances between IDs.

The resulting DataFrame should have cumulative distances along known routes, with diagonal values set to 0. If distances between toll locations A to B and B to C are known, then the distance from A to C should be the sum of these distances. Ensure the matrix is symmetric, accounting for bidirectional distances between toll locations (i.e. A to B is equal to B to A).
"""

def calculate_distance_matrix(df)->pd.DataFrame():
    # Write your logic here
    id=pd.unique(df[['id_start','id_end']].values.ravel('K'))
    distance_matrix=pd.DataFrame(data=np.inf,index=id,columns=id)
    np.fill_diagonal(distance_matrix.values,0) # distance from a location to itself is zero

    for _, row in df.iterrows():
        distance_matrix.loc[row['id_start'], row['id_end']] = row['distance']
        distance_matrix.loc[row['id_end'], row['id_start']] = row['distance']

    for k in id: # middle
        for i in id: # 1st
            for j in id: # 3rd
                distance_matrix.loc[i, j] = min(distance_matrix.loc[i, j],
                                                distance_matrix.loc[i, k] + distance_matrix.loc[k, j])

    return distance_matrix

df=pd.read_csv('dataset-2.csv')
distance_matrix = calculate_distance_matrix(df)
print(distance_matrix)



"""Question 10: Unroll Distance Matrix
Create a function unroll_distance_matrix that takes the DataFrame created in Question 9. The resulting DataFrame should have three columns: columns id_start, id_end, and distance.

All the combinations except for same id_start to id_end must be present in the rows with their distance values from the input DataFrame.
"""

def unroll_distance_matrix(df)->pd.DataFrame():

    # Write your logic here
    unrolled=[]

    for idstart in df.index:
      for idend in df.columns:
        if idstart!=idend:
          unrolled.append({'id_start':idstart,'id_end':idend,'distance':df.loc[idstart,idend]})
    unrolled_df=pd.DataFrame(unrolled)
    return unrolled_df

y=unroll_distance_matrix(distance_matrix)
print(y)



"""Question 11: Finding IDs within Percentage Threshold
Create a function find_ids_within_ten_percentage_threshold that takes the DataFrame created in Question 10 and a reference value from the id_start column as an integer.

Calculate average distance for the reference value given as an input and return a sorted list of values from id_start column which lie within 10% (including ceiling and floor) of the reference value's average.
"""

def find_ids_within_ten_percentage_threshold(df, reference_id)->pd.DataFrame():

    # Write your logic here
    reference_distances=df[df['id_start']==reference_id]['distance']

    if reference_distances.empty:
      return pd.DataFrame(columns=['id_start','average_distance'])
    reference_average=reference_distances.mean()

    lower_bound=reference_average*0.9
    upper_bound=reference_average*1.1

    average_distances=df.groupby('id_start')['distance'].mean().reset_index()

    filtered_ids=average_distances[(average_distances['distance'] >= lower_bound) &
                                      (average_distances['distance'] <= upper_bound)]
    return filtered_ids.sort_values(by='id_start')

reference_id=int(input("Enter the reference_id:"))
x=find_ids_within_ten_percentage_threshold(y,reference_id)
print(x)



"""question 12: Calculate Toll Rate
Create a function calculate_toll_rate that takes the DataFrame created in Question 10 as input and calculates toll rates based on vehicle types.
"""

def calculate_toll_rate(df)->pd.DataFrame():
    # Wrie your logic here
    rates = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }
    df['moto']=df['distance']*rates['moto']
    df['car']=df['distance']*rates['car']
    df['rv']=df['distance']*rates['rv']
    df['bus']=df['distance']*rates['bus']
    df['truck']=df['distance']*rates['truck']

    return df

total_toll=calculate_toll_rate(y) # dataset from Q 10
print(total_toll.head())



"""
Question 13: Calculate Time-Based Toll Rates
Create a function named calculate_time_based_toll_rates that takes the DataFrame created in Question 12 as input and calculates toll rates for different time intervals within a day.
"""

from datetime import time
def calculate_time_based_toll_rates(df)->pd.DataFrame():

    # Write your logic here
    weekday=[(time(0,0),time(10,0),0.8),(time(10,0),time(18,0),1.2),
            (time(18,0),time(23,59,59),0.8)]
    weekend=0.7
    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    expanded_rows = []

    for _,row in df.iterrows():
      for day in days:
        if day in ['saturday','sunday']:
          expanded_rows.append({
              'id_start': row['id_start'],
              'id_end': row['id_end'],
              'distance': row['distance'],
              'start_day': day,
              'start_time': time(0, 0),
              'end_day': day,
              'end_time': time(23, 59, 59),
              'moto': row['moto'] * weekend,
              'car': row['car'] * weekend,
              'rv': row['rv'] * weekend,
              'bus': row['bus'] * weekend,
              'truck': row['truck'] * weekend
          })
        else:
          for start, end, discount in weekday:
            expanded_rows.append({
                        'id_start': row['id_start'],
                        'id_end': row['id_end'],
                        'distance': row['distance'],
                        'start_day': day,
                        'start_time': start,
                        'end_day': day,
                        'end_time': end,
                        'moto': row['moto'] * discount,
                        'car': row['car'] * discount,
                        'rv': row['rv'] * discount,
                        'bus': row['bus'] * discount,
                        'truck': row['truck'] * discount
                    })



    df=pd.DataFrame(expanded_rows)
    df= df.round({
        'moto': 2,
        'car': 2,
        'rv': 2,
        'bus': 2,
        'truck': 2
    })
    return df
result=calculate_time_based_toll_rates(total_toll)
print(result.head(10))

